# docker-compose.yml
version: '3.8'

services:
  # Base de donn√©es PostgreSQL
  db:
    image: postgres:13
    container_name: medisecure_db
    environment:
      POSTGRES_DB: medisecure
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./medisecure-backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - medisecure_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend FastAPI
  backend:
    build: 
      context: ./medisecure-backend
      dockerfile: Dockerfile
    container_name: medisecure_backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/medisecure
      - ENVIRONMENT=docker
      - HOST=0.0.0.0
      - PORT=8000
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-this-in-production
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
      - SMTP_HOST=smtp.example.com
      - SMTP_PORT=587
      - SMTP_USER=user@example.com
      - SMTP_PASSWORD=your_password_here
      - EMAIL_FROM=noreply@medisecure.com
      - FRONTEND_URL=http://localhost:3000
    ports:
      - "8000:8000"
    volumes:
      - ./medisecure-backend:/app
    networks:
      - medisecure_network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend React
  frontend:
    build:
      context: ./medisecure-frontend
      dockerfile: Dockerfile
    container_name: medisecure_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
      - NODE_ENV=development
    ports:
      - "3000:3000"
    volumes:
      - ./medisecure-frontend:/app
      - /app/node_modules
    networks:
      - medisecure_network
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  medisecure_network:
    driver: bridge